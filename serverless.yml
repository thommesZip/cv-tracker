service: ${env:STACK_NAME}
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.7
  stage: prod
  region: eu-central-1
  apiGateway:
    shouldStartNameWithService: true
# you can define service wide environment variables here
  environment:
    REDIRECT_URLS_TABLE: ${env:REDIRECT_URLS_TABLE} #-${self:provider.stage}
    REDIRECT_TRACKING_TABLE: ${env:REDIRECT_TRACKING_TABLE} #-${self:provider.stage}
    IP_TABLE: ${env:IP_TABLE}
    IPDATA_API_KEY: ${env:IPDATA_API_KEY}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:ListShards
      Resource:
        - { "Fn::GetAtt": ["redirectUrlTable", "Arn" ] }
        - { "Fn::GetAtt": ["redirectTrackingTable", "Arn" ] }
        - { "Fn::GetAtt": ["redirectTrackingTable", "StreamArn" ] }
        - { "Fn::GetAtt": ["ipTable", "Arn" ] }

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
package:
  exclude:
    - pdf-generator/**


functions:
  redirect:
    handler: redirect-service/handler.redirect
    events:
      - http:
          path: /
          method: get
      - http:
          path: /{id}
          method: get
    
  whois:
    handler: whois-service/handler.whois
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          arn:
            Fn::GetAtt: [redirectTrackingTable, StreamArn]

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-offline
  - serverless-python-requirements

custom:
  customDomain:
    # activate this if you want to use a custom domain
    # domainName: ${env:REDIRECT_SERVICE_DOMAIN}
    # basePath: ''
    # stage: ${self:provider.stage}
    # createRoute53Record: true

  serverless-offline:
    httpPort: 4000
    stageVariables:
      foo: "bar"
  # pythonRequirements:
  #   dockerizePip: non-linux


resources: # CloudFormation template syntax from here on.
      Resources:
        # Table for Redirec Urls
        redirectUrlTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${env:REDIRECT_URLS_TABLE} #-${self:provider.stage}
            AttributeDefinitions:
              - AttributeName: urlId
                AttributeType: S
            KeySchema:
              - AttributeName: urlId
                KeyType: HASH

            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        # Table for tracking each redirect
        redirectTrackingTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${env:REDIRECT_TRACKING_TABLE}  #-${self:provider.stage}
            AttributeDefinitions:
              - AttributeName: eventId
                AttributeType: S
              - AttributeName: createdAt
                AttributeType: S
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            StreamSpecification:
              StreamViewType: "NEW_IMAGE"
        
        # Table for IP address resolver to save API calls
        ipTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${env:IP_TABLE} #-${self:provider.stage}
            AttributeDefinitions:
              - AttributeName: ip
                AttributeType: S
            KeySchema:
              - AttributeName: ip
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1